Fang Chen
apcs pd06
lab 06 -- review
2022-02-11

==================
Activity 1
==================

Q1 --
a. public static double sentimentVal()
b. Yes, it requires a String. If you pass a different type of parameter, the
file is no longer compliable and the terminal prints out "error: incompatible
types".
c. Yes, it returns a double.

Q2 --
Method Call                     Return Value
sentimentVal("why")             0.34
sentimentVal("did I")           0.0
sentimentVal("overthink")       0.0

Q3 --
a. It will compile because there is a singular String parameter given. Also,
sentimentVal() is a double, so you can set a double variable as the called
method.
b. It will NOT compile because it inputs a double and attempts to set a String
as the called method, creating two cases of incompatible types.
c. It will NOT compile because it inputs two String, but sentimentVal() only
accepts one String argument.

==================
Activity 2
==================

Q1 & Q2 --
Edited Review.java; terminal returned 4.109999999999999.

Q4 --
It iterates through the file, searching for spaces, and once that is found,
totalSentiments() will classify everything prior to the space as a word and
find the sentimentVal(). Then, everything from prior to the space would be
removed, and the function will continue iterating through the rest, summing up
all the sentiment values. This will continue until nothing is left and the total
is returned.

Q5 --
a. Not particularly because the sentiments have to be really high in order to
return a good rating.
b. We can multiply total sentiment by some factor or we can check the rating
against the input word count.

Q6 --
He should reversed the comparison sign around because in his current code, no
matter if the total sentiment is 0 or 14, it will always return 4.

==================
Activity 3
==================

Q3 --
The method indexOf() returns the index of a character in a String; substring()
returns part of a String, beginning from the specified start index up to the
specified end index. These methods can be used to divide a string into two parts
by finding the index of the character you want to split at and creating two
separate substrings. The first substring will have all the characters from the
first character up until the character at the specified index. The second
substring will contain the rest of the characters of the original string.

Q5 --
The difference between calling static methods as opposed to calling non-static
methods is that for static methods, it can be called without creating an
instance of Review. On the other hand, an instance of a class has to be created
to access the non-static method.

Q6 --
fakeReview() can be modified by using randomPositiveAdj() or randomNegativeAdj()
to create a (strictly) fake positive review or a (strictly) fake negative
review.

==================
Activity 4
==================

Q1 --
You want to troll something you really dislike.

Q2 --
You want to support something you fervently like.

Q3 --
Instead of a review that might be negative or positive, we can create a solely
positive one as to avoid randomness.

Q5 --
Removes first index.

Q6 --
Not removing it might cause an exception where no sentimentVal is returned.

Q7 --
Yes, if every chance of negativity is removed and only positive adjectives are
used.

==================
Activity 5
==================

Compilable and Runnable Program: Activity5.java
Project based off of Wordle

Q1 --
I chose to implement this program because it is a simple and fun minigame that
processes user input data (the word) and checks if each letter is in the
mystery word and if it is in the correct position.

Q2 --
The stages for completing the project are as follows: (1) brainstorm ideas,
(2) map out basic algorithm on KtS, (3) code individual parts (i.e. main(),
overloaded constructor for the game, play(), isIn(), and displayCheck()).

Q3 --
Header: public boolean isIn(String tempLetter) {}
The chosen parameter is a String, more specifically, the 1-length substring of
the word that the player guesses. I used this parameter to allow the method to
compare the letter with letters of the mystery word. I made the method
non-static because I wanted to call the instance variable _word within the
method.

Q4 --

~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
if (tempLetter.compareTo(_word.substring(i, i + 1)) == 0) {
  _check[i] = "+";
  _letters.remove(_letters.indexOf(tempLetter));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The methods of String class being called are compareTo() and substring(). I
use compareTo() to compare whether the two Strings (predetermined to be the
same length) are the same. The method returns an int value, which I convert to
a boolean expression with the boolean operator ==. I used substring() to take a
1-length "piece" of the String _word; it returns a String.

Q5 --

~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
if (isIn(tempLetter) && (_check[i].compareTo("+") != 0)) {
  _check[i] = "?";
  _letters.remove(_letters.indexOf(tempLetter));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Another way to achieve the same result as the boolean expression attached to
the if statement is placing an if statement within another if statement because
the boolean operator used is &&.

~~~~~~~~~~~~~~~~~~~~~~~~~~ Equivalent ~~~~~~~~~~~~~~~~~~~~~~~~~~
if (isIn(tempLetter)) {
  if (_check[i].compareTo("+") != 0) {
    _check[i] = "?";
    _letters.remove(_letters.indexOf(tempLetter));
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Q6 --

~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
for (int i = 0; i < 5; i ++) {
  _letters.add(_word.substring(i, i + 1));
  _check[i] = "-";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I used a for-loop iteration to set the elements of AL _letters to the five
letters of _word and the all 5 elements of _check[] to "-".

~~~~~~~~~~~~~~~~~~~~~~~~~~ Equivalent ~~~~~~~~~~~~~~~~~~~~~~~~~~
int i = 0;
while (i < 5) {
  _letters.add(_word.substring(i, i + 1));
  _check[i] = "-";
  i ++;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
